{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["i","App","props","handleSubmit","event","preventDefault","handleInputChange","console","log","target","name","value","setState","state","loading","people","fullName","fetch","response","json","data","this","results","filteredName","filter","person","first","indexOf","Container","className","onSubmit","type","placeholder","onChange","CardGroup","map","key","login","sha256","Card","border","style","width","Img","variant","src","picture","large","Body","Title","title","last","email","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qUAIIA,G,MAAI,GACaC,E,kDACnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IASRC,aAAe,SAACC,GACdA,EAAMC,kBAXU,EAclBC,kBAAoB,SAACF,GACnBA,EAAMC,iBACNE,QAAQC,IAAIJ,GACZG,QAAQC,IAAIJ,EAAMK,OAAOC,MACzBH,QAAQC,IAAIJ,EAAMK,OAAOE,OACzB,EAAKC,SAAL,eACGR,EAAMK,OAAOC,KAAON,EAAMK,OAAOE,SAlBpC,EAAKE,MAAQ,CACXC,SAAS,EACTC,OAAQ,GACRC,SAAU,MALI,E,wLA0BJ,yC,SACWC,MADX,0C,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKT,SAAS,CAAEG,OAAQK,EAAKE,QAASR,SAAS,IAC/CP,QAAQC,IAAIY,EAAKE,S,qIAIT,IAAD,OAEHC,EAAeF,KAAKR,MAAME,OAE9B,GAAIM,KAAKR,MAAMC,QACb,OAAO,2CAET,IAAKO,KAAKR,MAAME,OACd,OAAO,sDAEYM,KAAKR,MAAlBG,SAWR,OAVGhB,EAAI,IAELuB,EAAeF,KAAKR,MAAME,OAAOS,QAC/B,SAACC,GACC,OAA2D,IAApDA,EAAOf,KAAKgB,MAAMC,QAAQ,EAAKd,MAAMG,cAIlDhB,EAAI,EAKF,oCACA,kBAAC4B,EAAA,EAAD,KACE,6BACA,wBAAIC,UAAU,UAAd,mBACA,0BAAMC,SAAUT,KAAKlB,aAAc0B,UAAU,UAC3C,2BAAG,2BAAOE,KAAK,OAAOC,YAAY,SAAStB,KAAK,WAAWuB,SAAYZ,KAAKf,wBAI9E,6BACA,kBAACsB,EAAA,EAAD,KACE,kBAACM,EAAA,EAAD,KACGX,EAAaY,KAAI,SAAAV,GAAM,OACtB,yBAAKW,IAAKX,EAAOY,MAAMC,QACrB,kBAACC,EAAA,EAAD,CAAMC,OAAO,OAAOX,UAAU,6BAA6BY,MAAO,CAAEC,MAAO,UACzE,kBAACH,EAAA,EAAKI,IAAN,CAAUH,OAAO,OAAOI,QAAQ,MAAMC,IAAKpB,EAAOqB,QAAQC,QAC1D,kBAACR,EAAA,EAAKS,KAAN,KACE,kBAACT,EAAA,EAAKU,MAAN,KACKxB,EAAOf,KAAKwC,MACX,IACFzB,EAAOf,KAAKgB,MACV,IACFD,EAAOf,KAAKyC,MAET1B,EAAO2B,oB,GAnFDC,IAAMC,WCOnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.5310d20e.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Card, CardGroup, Container } from 'react-bootstrap'\nimport './App.css';\nlet i = 0;\nexport default class App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      loading: true,\n      people: [],\n      fullName: null\n    }\n  }\n  \n\n  handleSubmit = (event) => {\n    event.preventDefault()\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault()\n    console.log(event)\n    console.log(event.target.name)\n    console.log(event.target.value)\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n\n  async componentDidMount() {\n    const url = \"https://randomuser.me/api/?results=200\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({ people: data.results, loading: false });\n    console.log(data.results);\n  }\n\n\n  render() {\n    \n    let filteredName = this.state.people;\n\n    if (this.state.loading) {\n      return <div>loading...</div>;\n    }\n    if (!this.state.people) {\n      return <div>Did not find a person</div>;\n    }\n    const { fullName } = this.state\n    if(i > 1)\n    {\n      filteredName = this.state.people.filter(\n        (person) => {\n          return person.name.first.indexOf(this.state.fullName) !== -1;\n        }\n      );\n    }\n    i = 2;\n    \n    return (\n\n      // \n      <>\n      <Container>\n        <div >\n        <h3 className=\"center\">Search for user</h3>\n        <form onSubmit={this.handleSubmit} className=\"center\">\n          <p><input type='text' placeholder='Search' name='fullName' onChange = {this.handleInputChange} /></p>\n        </form>\n        </div>\n        </Container>\n        <div>\n        <Container>\n          <CardGroup>\n            {filteredName.map(person => (\n              <div key={person.login.sha256}>\n                <Card border=\"dark\" className=\"text-center ml-3 mr-3 mb-3\" style={{ width: '21rem' }}>\n                  <Card.Img border=\"dark\" variant=\"top\" src={person.picture.large} />\n                  <Card.Body >\n                    <Card.Title >\n                        {person.name.title\n                        + \" \" +\n                        person.name.first\n                        + \" \" +\n                        person.name.last}\n                    </Card.Title>\n                          {person.email}\n                  </Card.Body>\n                </Card>\n              </div>\n            ))}\n            \n        </CardGroup>\n        </Container>\n        </div>\n        \n      </>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}